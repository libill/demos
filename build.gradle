apply plugin: 'com.lv.weblogic'
// 声明构建的项目类型
apply plugin: 'com.android.application'
apply plugin: 'eclipse'

buildscript {

    repositories {
        mavenCentral()
        google()
        jcenter()
        mavenLocal()
        //阿里仓库
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/releases/' }
        maven { url "http://central.maven.org/maven2/" }
        maven { url "http://dl.bintray.com/laobie/maven" }
        maven { url "https://maven.google.com" }
        maven { url 'https://jitpack.io' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath "gradle.plugin.com.lv.plugins:gradle-weblogic-plugin:0.4"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
        mavenLocal()
        //阿里仓库
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/releases/' }
        maven { url "http://central.maven.org/maven2/" }
        maven { url "http://dl.bintray.com/laobie/maven" }
        maven { url "https://maven.google.com" }
        maven { url 'https://jitpack.io' }
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
}

// 设置编译android项目的参数，构建android项目的所有配置在这里完成
android {
    compileSdkVersion = 28
    buildToolsVersion = "28.0.2"

    defaultConfig {
        targetSdkVersion 28
        resConfigs "zh"  //去除多国语言资源，只支持中文
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

// 自定义一个task
task downloadPackageTask << {
    print "compileSdkVersion is ${android.compileSdkVersion};  "
    println "buildToolsVersion is ${android.buildToolsVersion}  "

    //当前日期时间
    String nowDate = new Date().format('yyyyMMddHHmmss')
    String fileName = "assets/package/README_${nowDate}"

    String targetPath = getBuildDir().parent + "\\assets\\package\\"

    //先删掉该文件夹的文件
    fileTree(targetPath).forEach({ file ->
        file.delete();
    })

    //拷贝文件过来
    copy {
        from 'README'
        into targetPath
    }

    //重命名文件
    File file = new File("assets/package/README");
    file.renameTo(fileName)
//    String remoteFilePath = "http://files.cnblogs.com/liqw/"
//    String zipName = "Bezier.zip"
//    redirectFollowingDownload(remoteFilePath, zipName, path)

    def remoteFilePathList = []
    def zipNameList = []
    String rootURL = "http://files.cnblogs.com/"
    remoteFilePathList.add(rootURL + "liqw/");
    zipNameList.add("Bezier.zip")

    println "start download package file"
    for (int i = 0; i < remoteFilePathList.size(); i++) {
        redirectFollowingDownload(remoteFilePathList.get(i), zipNameList.get(i), targetPath)
    }
    println "download all package file success"
}

def redirectFollowingDownload(String url, String filename, String targetPath) {
    String filePath = url + filename;
    while (url) {
        new URL(url).openConnection().with { conn ->
            conn.instanceFollowRedirects = false
            url = conn.getHeaderField("Location")
            if (!url) {
                new File(targetPath + filename).withOutputStream { out ->
                    conn.inputStream.with { inp ->
                        out << inp
                        inp.close()
                    }
                }
            }
        }
    }
    //拷贝文件到相应目录
    copy {
        from filename
        into targetPath
    }
    //删掉备份文件
    File tempfile = new File(filename);
    tempfile.delete()

    // 输出下载文件并拷贝到相应目录成功
    println "download file " + filePath + " success"
}

// 再执行preBuild之前插入执行task, 处理或输出一些信息
// @see: http://www.blogjava.net/wldandan/archive/2012/07/05/382246.html
preBuild.dependsOn downloadPackageTask
