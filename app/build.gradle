//apply plugin: 'com.lv.weblogic'
// 声明构建的项目类型
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    viewBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    api "androidx.legacy:legacy-support-v4:${androidSupportVersion}"

    implementation deps.app_compat
    implementation deps.material
    implementation deps.core_ktx
    implementation deps.constraint_layout
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel_ktx
    implementation deps.lifecycle.livedata_ktx
    implementation deps.activity.activity_ktx

    implementation deps.kotlin.stdlib


    implementation deps.permissionsdispatcher.permissionsdispatcher
    kapt deps.permissionsdispatcher.permissionsdispatcher_processor


    testImplementation deps.junit


    implementation deps.app_compat
    implementation deps.constraint_layout
    implementation deps.material
}

//// 自定义一个task
//task downloadPackageTask {
//    print "compileSdkVersion is ${android.compileSdkVersion};  "
//    println "buildToolsVersion is ${android.buildToolsVersion}  "
//
//    //当前日期时间
//    String nowDate = new Date().format('yyyyMMddHHmmss')
//    String fileName = "src/main/assets/package/README_${nowDate}"
//
//    String targetPath = getBuildDir().parent + "\\src\\main\\assets\\package\\"
//
//    //先删掉该文件夹的文件
//    fileTree(targetPath).forEach({ file ->
//        file.delete()
//    })
//
//    //拷贝文件过来
//    copy {
//        from 'README'
//        into targetPath
//    }
//
//    //重命名文件
//    File file = new File("src/main/assets/package/README")
//    file.renameTo(fileName)
////    String remoteFilePath = "http://files.cnblogs.com/liqw/"
////    String zipName = "Bezier.zip"
////    redirectFollowingDownload(remoteFilePath, zipName, path)
//
//    def remoteFilePathList = []
//    def zipNameList = []
//    String rootURL = "http://files.cnblogs.com/"
//    remoteFilePathList.add(rootURL + "liqw/")
//    zipNameList.add("Bezier.zip")
//
//    println "start download package file"
//    for (int i = 0; i < remoteFilePathList.size(); i++) {
//        redirectFollowingDownload(remoteFilePathList.get(i), zipNameList.get(i), targetPath)
//    }
//    println "download all package file success"
//}
//
//def redirectFollowingDownload(String url, String filename, String targetPath) {
//    String filePath = url + filename;
//    while (url) {
//        new URL(url).openConnection().with { conn ->
//            conn.instanceFollowRedirects = false
//            url = conn.getHeaderField("Location")
//            if (!url) {
//                new File(targetPath + filename).withOutputStream { out ->
//                    conn.inputStream.with { inp ->
//                        out << inp
//                        inp.close()
//                    }
//                }
//            }
//        }
//    }
//    //拷贝文件到相应目录
//    copy {
//        from filename
//        into targetPath
//    }
//    //删掉备份文件
//    File tempfile = new File(filename)
//    tempfile.delete()
//    println "delete file " + filename
//
//    if(new File(targetPath + filename).exists()){
//        println targetPath + filename + " exists"
//    }
//
//    // 输出下载文件并拷贝到相应目录成功
//    println "download file " + filePath + " success"
//}

// 再执行preBuild之前插入执行task, 处理或输出一些信息
// @see: http://www.blogjava.net/wldandan/archive/2012/07/05/382246.html
//preBuild.dependsOn downloadPackageTask
